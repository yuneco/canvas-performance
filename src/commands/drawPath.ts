
const pathHeart = new Path2D("M16 5.16789C16 11.0026 8.58643 15.7254 8.27071 15.9204C8.1875 15.9727 8.09449 16 8 16C7.90551 16 7.8125 15.9727 7.72929 15.9204C7.41357 15.7254 0 11.0026 0 5.16789C0.00132338 3.79775 0.468329 2.48418 1.29856 1.51534C2.12879 0.546512 3.25445 0.00154431 4.42857 0C5.90357 0 7.195 0.740174 8 1.9913C8.805 0.740174 10.0964 0 11.5714 0C12.7456 0.00154431 13.8712 0.546512 14.7014 1.51534C15.5317 2.48418 15.9987 3.79775 16 5.16789Z")

const pathCat = new Path2D("M16.0009 9.039C16.0009 8.27848 15.9372 7.31423 15.622 6.37905C16.2399 5.21534 16.0444 1.40848 15.442 1.05248C14.8887 0.725022 12.3724 1.95913 11.2542 3.06151C10.8186 3.00465 10.3796 2.97667 9.94032 2.97778C9.5061 2.97679 9.07228 3.00414 8.64163 3.05964C7.51975 1.9866 4.98211 0.742089 4.46263 1.04902C3.82795 1.42474 3.63862 5.11587 4.26929 6.35078C3.94582 7.29476 3.88049 8.27101 3.88049 9.039C3.88049 9.38912 4.29543 10.0286 4.99837 10.6782L4.99491 10.675C4.84637 10.8254 4.12236 11.6621 4.5189 13.3437C4.34662 13.3531 4.17384 13.3426 4.00396 13.3125C3.64982 13.2474 3.30021 13.0917 2.96581 12.8491C2.67114 12.6349 2.39167 12.3621 2.11139 12.0147C1.99273 11.8643 1.86632 11.6995 1.75459 11.5213C1.64771 11.3519 1.54945 11.1772 1.46018 10.9979C1.26978 10.6128 1.15245 10.2534 1.11191 9.92991C1.08943 9.7677 1.09131 9.60304 1.11751 9.44139C1.14258 9.29659 1.19271 9.16913 1.26311 9.07259C1.33085 8.97926 1.41378 8.91633 1.51165 8.8846C1.59352 8.8574 1.68419 8.855 1.77432 8.87633C1.97966 8.92326 2.18873 9.09979 2.33433 9.34912C2.47993 9.59552 2.57913 9.92005 2.62207 10.2878C2.6337 10.3865 2.66501 10.4818 2.71416 10.5682C2.76331 10.6546 2.82929 10.7303 2.90821 10.7907C3.06994 10.9162 3.27398 10.9742 3.47755 10.9526C3.53515 10.947 3.59195 10.935 3.64635 10.9171C3.98956 10.8046 4.20103 10.4814 4.16076 10.1326C4.1578 10.109 4.15398 10.0855 4.14929 10.0622L4.14769 10.0539C4.02156 9.48165 3.81889 9.0086 3.52662 8.60754C3.34128 8.35607 3.12741 8.14755 2.89061 7.98782C2.6122 7.79929 2.297 7.67849 1.98099 7.63929C1.63459 7.59449 1.26951 7.65395 0.967376 7.80489C0.668217 7.95347 0.420004 8.18766 0.254298 8.47767C0.112962 8.7246 0.0294943 9.00566 0.00656062 9.31312C-0.0104643 9.57585 0.0112802 9.83965 0.0710949 10.096C0.170297 10.5304 0.350033 10.9504 0.637237 11.4187C0.751906 11.604 0.881241 11.7909 1.03271 11.9896L1.08764 12.0611C1.20551 12.2136 1.32765 12.3715 1.46045 12.5216C1.80206 12.9133 2.14526 13.221 2.50873 13.4632C2.94501 13.7549 3.42101 13.944 3.88609 14.0096C4.15569 14.0498 4.43756 14.0458 4.72077 14.008C4.80901 14.2447 4.90932 14.4767 5.02131 14.7032C5.20264 15.0706 5.87972 15.4069 6.54746 15.5535C6.65733 16.0125 6.8032 16.3738 6.9992 16.5669C7.08907 16.6554 7.21387 16.729 7.35841 16.7911L7.35361 16.7991L7.61468 16.885L7.61521 16.8826C7.83826 16.943 8.06711 16.9795 8.29789 16.9914L8.29709 16.9988H8.57256L8.5723 16.9972C8.8443 16.9932 9.11124 16.961 9.34431 16.8964L9.34511 16.9015L9.60511 16.813L9.59951 16.8042C9.73818 16.7426 9.85685 16.6676 9.94058 16.5756C10.0243 16.6679 10.1433 16.7426 10.2817 16.8042L10.2761 16.813L10.5361 16.9015L10.5369 16.8964C10.7694 16.961 11.0366 16.9932 11.3083 16.9972L11.3081 16.9988H11.5835L11.5825 16.9919C11.8135 16.9799 12.0426 16.9433 12.266 16.8828L12.2662 16.8855L12.5268 16.7996L12.5222 16.7916C12.6665 16.73 12.7916 16.6559 12.8814 16.5674C13.0772 16.3743 13.223 16.013 13.3332 15.5541C14.0006 15.4074 14.678 15.0709 14.8596 14.7037C16.1391 12.1115 15.0751 10.8672 14.886 10.6755C15.5873 10.0264 16.0009 9.38832 16.0009 9.039ZM14.4463 2.81885C14.5913 2.90445 14.7425 3.91189 14.7247 4.75988C14.2663 4.22175 13.6449 3.76043 12.8084 3.44177C13.4886 3.03991 14.2988 2.73165 14.4463 2.81885ZM12.666 6.65291C12.5532 6.77824 12.4633 7.08463 12.4633 7.57289C12.4633 8.88646 13.1129 8.88646 13.1129 7.57289C13.1129 7.00917 12.9934 6.68891 12.8566 6.60891C13.9398 6.41398 14.5196 7.29236 14.5196 7.29236C14.5196 7.29236 14.4695 8.42887 13.2945 8.73393C12.119 9.03926 11.4891 8.07875 11.4891 8.07875C11.4891 8.07875 11.5401 6.97743 12.666 6.65291ZM8.39203 8.07875C8.39203 8.07875 7.76215 9.03926 6.58666 8.73393C5.41171 8.42861 5.36158 7.29236 5.36158 7.29236C5.36158 7.29236 5.94159 6.41371 7.02454 6.60891C6.888 6.68891 6.76853 7.00917 6.76853 7.57289C6.76853 8.88646 7.41761 8.88646 7.41761 7.57289C7.41761 7.08463 7.32801 6.77824 7.21521 6.65291C8.34109 6.97743 8.39203 8.07875 8.39203 8.07875ZM5.45838 2.81592C5.59172 2.73698 6.39439 3.04631 7.07467 3.44124C6.24506 3.7575 5.62612 4.21349 5.16904 4.74548C5.14691 3.89989 5.30051 2.90898 5.45838 2.81592ZM5.78532 14.9437C5.80159 14.7685 6.04986 14.8429 6.42906 14.9399C6.4576 15.1231 6.48986 15.297 6.52586 15.4602C6.06986 15.3367 5.76772 15.1399 5.78532 14.9437ZM7.41921 16.6858C7.22427 16.598 7.10241 16.4871 7.10241 16.3645C7.10241 16.1997 7.31681 16.2365 7.64375 16.2946L7.41921 16.6858ZM8.31763 16.8679C8.06055 16.8564 7.82695 16.8199 7.63388 16.7636L7.70402 16.3053C7.90215 16.3402 8.13922 16.3765 8.39336 16.3839L8.31763 16.8679ZM8.55256 16.8711L8.47656 16.3877L8.47949 16.3879C8.7667 16.3879 9.03337 16.3445 9.25391 16.3053L9.32404 16.7639C9.1083 16.8266 8.84377 16.8652 8.55256 16.8711ZM9.53044 16.69L9.29311 16.2986C9.63311 16.2378 9.85632 16.1959 9.85632 16.3645C9.85658 16.489 9.73098 16.6015 9.53044 16.69ZM9.94032 15.0999L8.75923 12.6181L8.7571 12.6176C9.14695 12.6935 9.54314 12.7322 9.94032 12.7331C10.3449 12.7331 10.7395 12.6915 11.1219 12.6179L9.94032 15.0999ZM10.3507 16.69C10.1502 16.6018 10.0243 16.489 10.0243 16.3645C10.0243 16.1959 10.2475 16.2378 10.5873 16.2986L10.3507 16.69ZM11.3283 16.8711C11.0371 16.8655 10.7726 16.8266 10.5571 16.7644L10.6267 16.3055C10.8475 16.3445 11.1142 16.3882 11.4019 16.3882H11.4038L11.3283 16.8711ZM11.563 16.8679L11.487 16.3842C11.7417 16.3767 11.9787 16.3405 12.1772 16.3055L12.2478 16.7639C12.054 16.8199 11.8203 16.8567 11.563 16.8679ZM12.462 16.686L12.2377 16.2946C12.5649 16.2362 12.779 16.1997 12.779 16.3645C12.779 16.4871 12.6569 16.598 12.462 16.686ZM13.355 15.4602C13.3913 15.2973 13.4236 15.1229 13.4516 14.9399C13.8313 14.8429 14.0798 14.7682 14.0956 14.9437C14.1137 15.1399 13.8116 15.3367 13.355 15.4602ZM9.94032 12.5237C7.48455 12.5237 5.10531 10.4918 5.10531 10.4918C5.10531 10.4918 7.33468 9.77151 8.17122 9.13606C8.69896 8.735 9.28297 7.40649 9.94032 7.40649C10.5977 7.40649 11.1814 8.735 11.7097 9.13606C12.5462 9.77151 14.7759 10.4918 14.7759 10.4918C14.7759 10.4918 12.3966 12.5237 9.94032 12.5237Z M11.0222 11.104C10.8019 11.0883 10.5937 11.0192 10.4259 10.887C10.2587 10.7598 10.1353 10.5779 10.0993 10.3774L10.0875 10.3115C10.2073 10.2819 10.3401 10.215 10.4779 10.0822C10.7905 9.78165 10.8817 9.43259 10.7633 9.29152C10.5987 9.09473 10.0918 9.07953 9.94032 9.07953C9.78938 9.07953 9.28191 9.09473 9.11684 9.29152C8.99977 9.43259 9.0907 9.78165 9.40324 10.0822C9.54111 10.215 9.67391 10.2819 9.79311 10.3115L9.78138 10.3774C9.74485 10.5774 9.62245 10.76 9.45418 10.887C9.29071 11.0187 9.07124 11.088 8.8635 11.1038C8.63336 11.1142 8.41763 11.0667 8.21922 10.9486C8.01217 10.8272 7.85499 10.6362 7.77575 10.4096C7.78748 10.6638 7.92695 10.911 8.12695 11.0814C8.32536 11.2518 8.59736 11.3523 8.8531 11.3632C9.12985 11.3776 9.40365 11.3006 9.63231 11.144C9.75471 11.058 9.85923 10.9491 9.94005 10.8232C10.023 10.9504 10.1275 11.0603 10.2483 11.1435C10.4753 11.299 10.7468 11.3762 11.0217 11.3632C11.2897 11.3519 11.5466 11.2529 11.7529 11.0814C11.9529 10.9104 12.0924 10.664 12.1044 10.4096C12.0251 10.6361 11.8681 10.8271 11.6611 10.9486C11.4665 11.0664 11.2403 11.1144 11.0222 11.104Z")


export const drawPreConstructedPath = (ctx: CanvasRenderingContext2D,size: number, count: number)=> {

  const w = ctx.canvas.width
  const h = ctx.canvas.height

  ctx.strokeStyle = "#aaa"
  for (let i = 0; i < count; i++) {
    const x = Math.random() * w
    const y = Math.random() * h
    ctx.beginPath()
    ctx.fillStyle = i % 2 === 0 ? '#fff' : '#ccc'
    ctx.translate(x, y)
    ctx.scale(size/16, size/16)
    ctx.fill(pathHeart)
    ctx.resetTransform()
  }
}

export const drawPreConstructedPath2 = (ctx: CanvasRenderingContext2D,size: number, count: number) => {
  const w = ctx.canvas.width
  const h = ctx.canvas.height

  ctx.strokeStyle = "#aaa"
  for (let i = 0; i < count; i++) {
    const x = Math.random() * w
    const y = Math.random() * h
    ctx.beginPath()
    ctx.fillStyle = i % 2 === 0 ? '#fff' : '#ccc'
    ctx.translate(x, y)
    ctx.scale(size/16, size/16)
    ctx.fill(pathCat)
    ctx.resetTransform()
  }
}
